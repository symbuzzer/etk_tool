import pygame
import requests
import os
import re
import zipfile
import shutil

scriptVersion = "2.0.3"

system_theme_path = "/usr/share/emulationstation/themes/es-theme-knulli"
userdata_theme_path = "/userdata/themes/es-theme-knulli"

pygame.init()

font = pygame.font.Font(None, 36)
message_font = pygame.font.Font(None, 48)
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("ETK Tool")

def show_message(message):
    screen.fill((0, 0, 0))
    text_surface = message_font.render(message, True, (255, 255, 255))
    text_rect = text_surface.get_rect(center=(screen.get_width() // 2, screen.get_height() // 2))
    screen.blit(text_surface, text_rect.topleft)
    pygame.display.flip()
    pygame.time.wait(2000)

def check_internet():
    try:
        requests.get("https://www.avalibeyaz.com", timeout=5)
        return True
    except requests.ConnectionError:
        return False

def get_remote_script_version():
    url = "https://raw.githubusercontent.com/symbuzzer/etk_tool/main/etk_tool.pygame"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            match = re.search(r'scriptVersion\s*=\s*"(.*?)"', response.text)
            return match.group(1) if match else None
    except requests.ConnectionError:
        return None

def get_local_theme_version(path):
    if os.path.exists(path):
        try:
            with open(os.path.join(path, "theme.xml"), 'r') as f:
                content = f.read()
                match = re.search(r'<v\.themeVersion>(.*?)</v\.themeVersion>', content)
                return match.group(1) if match else None
        except Exception:
            return None
    return None

def get_remote_theme_version():
    urls = [
        "https://raw.githubusercontent.com/symbuzzer/es-theme-knulli/refs/heads/main/theme.xml",
        "https://raw.githubusercontent.com/symbuzzer/es-theme-knulli/refs/heads/main/beta.version"
    ]
    
    versions = []
    for url in urls:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                match = re.search(r'<v\.themeVersion>(.*?)</v\.themeVersion>', response.text)
                if match:
                    versions.append(match.group(1))
        except requests.ConnectionError:
            pass

    if versions:
        max_version = max(versions)
        beta_version_index = versions.index(max_version)
        if beta_version_index == 1:
            show_message(f"Beta version of theme on Github: v{max_version}")
        else:
            show_message(f"Latest theme version on Github: v{max_version}")
        return max_version
    else:
        return None

def download_file(url, destination):
    try:
        response = requests.get(url, stream=True, timeout=10)
        if response.status_code != 200:
            raise Exception(f"Failed to download file. HTTP {response.status_code}")
        total_length = int(response.headers.get('content-length', 0))
        downloaded = 0
        with open(destination, 'wb') as f:
            for data in response.iter_content(chunk_size=100 * 1024 * 1024):
                downloaded += len(data)
                f.write(data)
        return destination
    except Exception as e:
        show_message(f"Error downloading, exiting...")
        raise

def save_overlay():
    show_message("Saving overlay...")
    result = os.system("sh /usr/bin/batocera-save-overlay")
    if result == 0:
        show_message("Overlay saved succesfully!")
    else:
        show_message("Error: Overlay not saved!")

def update_theme(destination, download_url):
        show_message("Downloading...")
        zip_path = os.path.join(destination, "es-theme-knulli.zip")
        download_file(download_url, zip_path)
        theme_folder_path = os.path.join(destination, "es-theme-knulli")
        if os.path.exists(theme_folder_path):
            shutil.rmtree(theme_folder_path)
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(destination)
        os.remove(zip_path)
        if os.path.exists(system_theme_path):
            save_overlay()

def main():
    show_message(f"Starting ETK Tool v{scriptVersion} by Ali BEYAZ...")

    if not check_internet():
        show_message("No internet connection. Exiting...")
        pygame.quit()

    remote_script_version = get_remote_script_version()
    if remote_script_version and remote_script_version > scriptVersion:
        show_message(f"ETK Tool v{remote_version} is available! Updating now...")
        download_file("https://raw.githubusercontent.com/symbuzzer/etk_tool/main/etk_tool.pygame", "/userdata/roms/pygame/etk_tool.pygame")
        show_message("ETK Tool updated! Please restart.")
        pygame.quit()

    theme_destination = None

    if os.path.exists(system_theme_path):
        theme_destination = "/usr/share/emulationstation/themes"
    elif os.path.exists(userdata_theme_path):
        theme_destination = "/userdata/themes"

    if theme_destination:
        local_theme_version = get_local_theme_version(theme_destination + "/es-theme-knulli")
        remote_theme_version = get_remote_theme_version()

        if local_theme_version and remote_theme_version and remote_theme_version > local_theme_version:
            show_message(f"Theme updating to v{remote_theme_version}...")
            update_theme(theme_destination, f"https://github.com/symbuzzer/es-theme-knulli/releases/download/v{remote_theme_version}/es-theme-knulli.zip")
            show_message("Theme update complete! Exiting...")
            pygame.quit()
        else:
            show_message(f"Theme v{remote_theme_version} already installed!")
            show_message("No updates available. Exiting...")
            pygame.quit()
    else:
        show_message("Theme not installed yet!")
        update_theme("/userdata/themes", "https://github.com/symbuzzer/es-theme-knulli/releases/latest/download/es-theme-knulli.zip")
        show_message("Theme installed successfully! Exiting...")
        pygame.quit()

if __name__ == "__main__":
    main()
