import pygame
import requests
import os
import zipfile
import shutil

scriptVersion = "1.3.0"

pygame.init()
font = pygame.font.Font(None, 36)
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("ETK Tool")

theme_directories = [
    "/userdata/themes/es-theme-knulli",
    "/usr/share/emulationstation/themes/es-theme-knulli"
]

def show_message(message):
    screen.fill((0, 0, 0))
    text_surface = font.render(message, True, (255, 255, 255))
    text_rect = text_surface.get_rect(center=(screen.get_width() // 2, screen.get_height() // 2))
    screen.blit(text_surface, text_rect.topleft)
    pygame.display.flip()
    pygame.time.wait(2000)

def check_internet():
    try:
        requests.get("http://www.avalibeyaz.com", timeout=5)
        return True
    except requests.ConnectionError:
        return False

def find_theme_directory():
    """Return the preferred theme directory if it exists."""
    if os.path.exists(theme_directories[0]):
        return theme_directories[0]
    for theme_dir in theme_directories[1:]:
        if os.path.exists(theme_dir):
            return theme_dir
    return None

def get_local_version(theme_dir):
    """Read the theme version from the theme.xml in the preferred directory."""
    if theme_dir == theme_directories[1] and os.path.exists(theme_directories[0]):
        # Prefer userdata theme version if both exist
        theme_dir = theme_directories[0]
    
    theme_file = os.path.join(theme_dir, "theme.xml")
    if not os.path.exists(theme_file):
        return None
    with open(theme_file, 'r') as file:
        for line in file:
            if "version:" in line:
                return line.split(":")[1].strip()
    return None

def get_tool_version_from_github():
    github_url = "https://raw.githubusercontent.com/symbuzzer/etk_tool/main/etk_tool.pygame"
    response = requests.get(github_url)
    if response.status_code != 200:
        return None
    for line in response.text.splitlines():
        if "scriptVersion =" in line:
            return line.split("=")[1].strip().replace('"', '')
    return None

def parse_version(version):
    try:
        return tuple(map(int, version.split(".")))
    except ValueError:
        return (0, 0, 0)  # Default to a very old version if parsing fails

def download_and_extract(url, extract_to):
    try:
        response = requests.get(url, stream=True, timeout=10)
        if response.status_code == 200:
            zip_path = os.path.join(extract_to, "es-theme-knulli.zip")
            with open(zip_path, 'wb') as file:
                total_length = int(response.headers.get('content-length', 0))
                downloaded = 0

                chunk_size = 10 * 1024 * 1024  # 10 MB
                for data in response.iter_content(chunk_size=chunk_size):
                    if data:
                        file.write(data)
                        downloaded += len(data)
                        progress_message = f"Downloading... {downloaded / total_length * 100:.2f}%"
                        show_message(progress_message)

            show_message("Installing theme...")

            try:
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_to)
                show_message("Installed successfully!")
            except zipfile.BadZipFile:
                show_message("Error: bad zip file, exiting...")
            except Exception as e:
                show_message(f"Error: installation error {str(e)}, exiting...")

            try:
                os.remove(zip_path)
                show_message("Cleaning temp files...")
            except Exception as e:
                show_message(f"Error: zip can't be erased {str(e)}, exiting...")
        else:
            show_message(f"Error: download error 1: {response.status_code}, exiting...")
    except Exception as e:
        show_message(f"Error: download error 2 {str(e)}, exiting...")

def get_github_versions():
    base_url = "https://raw.githubusercontent.com/symbuzzer/es-theme-knulli/main/"
    files = ["theme.xml", "betaversion"]
    versions = []

    for file in files:
        response = requests.get(base_url + file)
        if response.status_code == 200:
            for line in response.text.splitlines():
                if "version:" in line:
                    versions.append(line.split(":")[1].strip())
                    break
        else:
            versions.append(None)

    return versions

def determine_theme_url(beta_version):
    if beta_version:
        return f"https://github.com/symbuzzer/es-theme-knulli/releases/download/v{beta_version}/es-theme-knulli.zip"
    return "https://github.com/symbuzzer/es-theme-knulli/releases/latest/download/es-theme-knulli.zip"

def install_theme():
    """Install theme for the first time using the normal version."""
    versions = get_github_versions()
    normal_version = versions[0]
    if not normal_version:
        show_message("Error: no theme version found on Github, exiting...")
        return
    
    theme_zip_url = determine_theme_url(None)
    download_and_extract(theme_zip_url, "/userdata/themes/")
    show_message(f"Theme version {normal_version} installed successfully!")

def update_theme():
    """Update theme by comparing local, normal, and beta versions."""
    versions = get_github_versions()
    theme_xml_version = parse_version(versions[0]) if versions[0] else (0, 0, 0)
    beta_version = versions[1]
    beta_version_tuple = parse_version(beta_version) if beta_version else (0, 0, 0)

    if beta_version and beta_version_tuple > theme_xml_version:
        show_message(f"New theme beta update found: {beta_version}")
        theme_zip_url = determine_theme_url(beta_version)
    else:
        show_message(f"New theme update found: {versions[0]}")
        theme_zip_url = determine_theme_url(None)

    theme_dir = find_theme_directory()
    if theme_dir is None:
        show_message("Error: Theme directory not found, exiting...")
        return

    try:
        if os.path.exists(theme_dir):
            show_message("Cleaning existing theme...")
            shutil.rmtree(theme_dir)

        download_and_extract(theme_zip_url, os.path.dirname(theme_dir))
        os.system("sh /usr/bin/batocera-save-overlay")
        show_message("Theme update complete!")
    except Exception as e:
        show_message(f"Error during update: {str(e)}, exiting...")

def update_tool():
    tool_url = "https://github.com/symbuzzer/etk_tool/releases/latest/download/etk_tool.pygame"
    local_tool_path = "/userdata/roms/pygame/etk_tool.pygame"
    
    try:
        response = requests.get(tool_url, timeout=10)
        if response.status_code == 200:
            with open(local_tool_path, 'wb') as file:
                file.write(response.content)
            show_message("ETK Tool updated successfully, please restart")
        else:
            show_message(f"Error: download error {response.status_code}, exiting...")
    except Exception as e:
        show_message(f"Error: download failed {str(e)}, exiting...")

if __name__ == "__main__":
    show_message(f"Starting ETK Tool v{scriptVersion} by Ali BEYAZ...")
    
    if not check_internet():
        show_message("Error: no internet connection, exiting...")
    else:
        github_tool_version = get_tool_version_from_github()
        if github_tool_version and parse_version(github_tool_version) > parse_version(scriptVersion):
            show_message(f"New ETK Tool update found: {github_tool_version}, updating...")
            update_tool()
            pygame.quit()
            exit()

        theme_dir = find_theme_directory()
        versions = get_github_versions()
        theme_xml_version = parse_version(versions[0]) if versions[0] else (0, 0, 0)
        beta_version = versions[1]
        beta_version_tuple = parse_version(beta_version) if beta_version else (0, 0, 0)

        if theme_dir is None:
            show_message("Theme isn't installed yet, downloading...")
            install_theme()
        else:
            local_version = get_local_version(theme_dir)
            if not versions[0] and not beta_version:
                show_message("Error: github problem, exiting...")
            elif local_version and parse_version(local_version) >= max(theme_xml_version, beta_version_tuple):
                show_message("There is no theme update on Github, exiting...")
            else:
                update_theme()

    pygame.quit()
